name: PR Comment Deploy

on:
  issue_comment:
    types: [created]

jobs:
  deploy-from-comment:
    # Only run on PR comments
    if: github.event.issue.pull_request != null
    runs-on: ubuntu-latest
    
    steps:
    - name: Parse deployment comment
      id: parse-comment
      run: |
        echo "=== PR Comment Deployment Analysis ==="
        
        COMMENT_BODY='${{ github.event.comment.body }}'
        COMMENT_USER='${{ github.event.comment.user.login }}'
        PR_NUMBER='${{ github.event.issue.number }}'
        PR_TITLE='${{ github.event.issue.title }}'
        
        echo "PR #$PR_NUMBER: $PR_TITLE"
        echo "Comment by: $COMMENT_USER"
        echo "Comment body:"
        echo "$COMMENT_BODY"
        echo ""
        
        # Check if comment contains valid deployment JSON with required format
        if echo "$COMMENT_BODY" | jq empty 2>/dev/null; then
          # Validate required fields: environment, version, features
          ENVIRONMENT=$(echo "$COMMENT_BODY" | jq -r '.environment // empty')
          VERSION=$(echo "$COMMENT_BODY" | jq -r '.version // empty')
          FEATURES=$(echo "$COMMENT_BODY" | jq -r '.features // empty')
          
          if [ -n "$ENVIRONMENT" ] && [ -n "$VERSION" ] && [ "$FEATURES" != "null" ] && [ "$FEATURES" != "empty" ]; then
            echo "Valid deployment JSON detected with required fields"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            # Compact the JSON to remove formatting issues
            COMPACT_JSON=$(echo "$COMMENT_BODY" | jq -c .)
            echo "deploy_json=$COMPACT_JSON" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
            echo "triggered_by=$COMMENT_USER" >> $GITHUB_OUTPUT
          else
            echo "JSON is missing required deployment fields"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Comment is not valid JSON"
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Skip if no valid JSON
      if: steps.parse-comment.outputs.should_deploy != 'true'
      run: |
        echo "PR comment detected but does not match required deployment format"
        echo ""
        echo "To trigger a deployment pipeline via PR comment, post a JSON object with this exact format:"
        echo '{'
        echo '  "environment": "production",'
        echo '  "version": "2.0.0",'
        echo '  "features": ["feature3", "feature4"]'
        echo '}'
        echo ""
        echo "Required fields:"
        echo "- environment: Target deployment environment (string)"
        echo "- version: Version to deploy (string)" 
        echo "- features: List of features to enable (array of strings)"
        echo ""
        echo "This workflow only processes JSON comments with this specific format on Pull Requests."
        exit 0
        
    - name: Checkout PR code
      if: steps.parse-comment.outputs.should_deploy == 'true'
      uses: actions/checkout@v4
      with:
        # Checkout the exact PR head to deploy the PR code
        ref: refs/pull/${{ github.event.issue.number }}/head
        fetch-depth: 0
        
    - name: Process deployment parameters
      if: steps.parse-comment.outputs.should_deploy == 'true'
      id: process-params
      run: |
        echo "=== Processing Deployment Parameters ==="
        
        JSON_INPUT='${{ steps.parse-comment.outputs.deploy_json }}'
        echo "Input JSON: $JSON_INPUT"
        
        # Extract deployment parameters (no defaults - all required)
        ENVIRONMENT=$(echo "$JSON_INPUT" | jq -r '.environment')
        VERSION=$(echo "$JSON_INPUT" | jq -r '.version')
        FEATURES=$(echo "$JSON_INPUT" | jq -r '.features | join(",")')
        
        echo "=== Parsed Deployment Parameters ==="
        echo "Environment: $ENVIRONMENT"
        echo "Version: $VERSION"
        echo "Features: $FEATURES"
        echo "PR Number: ${{ steps.parse-comment.outputs.pr_number }}"
        echo "Triggered by: ${{ steps.parse-comment.outputs.triggered_by }}"
        
        # Set outputs for deployment steps
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "features=$FEATURES" >> $GITHUB_OUTPUT
        
    - name: Validate deployment environment
      if: steps.parse-comment.outputs.should_deploy == 'true'
      run: |
        echo "=== Validating Deployment Environment ==="
        
        ENVIRONMENT="${{ steps.process-params.outputs.environment }}"
        TRIGGERED_BY="${{ steps.parse-comment.outputs.triggered_by }}"
        
        # Environment-specific validation
        case "$ENVIRONMENT" in
          "production")
            echo "PRODUCTION DEPLOYMENT REQUESTED"
            echo "Triggered by: $TRIGGERED_BY"
            echo ""
            echo "PRODUCTION DEPLOYMENT SAFETY CHECK:"
            echo "- Environment: $ENVIRONMENT"
            echo "- Triggered by: $TRIGGERED_BY"
            echo "- PR: #${{ steps.parse-comment.outputs.pr_number }}"
            echo ""
            echo "Proceeding with production deployment in 10 seconds..."
            sleep 10
            ;;
          "staging")
            echo "Staging deployment - good for testing"
            ;;
          "development")
            echo "Development deployment - safe for testing"
            ;;
          *)
            echo "Unknown environment: $ENVIRONMENT"
            echo "Valid environments: development, staging, production"
            ;;
        esac
        
    - name: Trigger Jenkins deployment
      if: steps.parse-comment.outputs.should_deploy == 'true'
      run: |
        echo "=== Mock Jenkins Deployment Pipeline ==="
        
        echo "Deployment Parameters:"
        echo "- Environment: ${{ steps.process-params.outputs.environment }}"
        echo "- Version: ${{ steps.process-params.outputs.version }}"
        echo "- Features: ${{ steps.process-params.outputs.features }}"
        echo "- PR: #${{ steps.parse-comment.outputs.pr_number }}"
        echo "- Triggered by: ${{ steps.parse-comment.outputs.triggered_by }}"
        echo ""
        
        echo "Simulating deployment process..."
        echo "Step 1: Initializing deployment environment..."
        sleep 3
        echo "Step 2: Building application..."
        sleep 5
        echo "Step 3: Running tests..."
        sleep 4
        echo "Step 4: Preparing deployment artifacts..."
        sleep 3
        echo "Step 5: Deploying to ${{ steps.process-params.outputs.environment }}..."
        sleep 5
        echo ""
        echo "Mock deployment completed successfully!"
        echo "Deployment triggered by comment: ${{ github.event.comment.html_url }}"
        echo "Jenkins build URL (mocked): https://jenkins.example.com/job/pr-deployment/123"
        
    - name: Post deployment status to PR
      if: steps.parse-comment.outputs.should_deploy == 'true'
      run: |
        echo "=== Posting Deployment Status to PR ==="
        
        # Determine status - all deployments are live (no dry run concept)
        STATUS_TEXT="Deployment Triggered"
        ACTION_TEXT="deploying"
        
        # Create deployment status comment
        DEPLOYMENT_COMMENT="$STATUS_TEXT
        
        PR: #${{ steps.parse-comment.outputs.pr_number }} - ${{ steps.parse-comment.outputs.pr_title }}
        Triggered by: @${{ steps.parse-comment.outputs.triggered_by }}
        Action: Now $ACTION_TEXT PR code to ${{ steps.process-params.outputs.environment }}
        
        Deployment Parameters:
        - Environment: ${{ steps.process-params.outputs.environment }}
        - Version: ${{ steps.process-params.outputs.version }}
        - Features: ${{ steps.process-params.outputs.features }}
        
        Links:
        - Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        - Mock Jenkins: https://jenkins.example.com/job/pr-deployment/123
        - Triggering Comment: ${{ github.event.comment.html_url }}
        
        Status: Pipeline triggered successfully with PR context!"
        
        # Post the status comment
        curl -X POST \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "${{ github.event.issue.url }}/comments" \
          -d "{\"body\": \"$DEPLOYMENT_COMMENT\"}"
        
    - name: Deployment summary
      if: steps.parse-comment.outputs.should_deploy == 'true'
      run: |
        echo "=== Deployment Summary ==="
        echo "PR Comment Deployment Completed"
        echo ""
        echo "Deployment Details:"
        echo "- PR: #${{ steps.parse-comment.outputs.pr_number }}"
        echo "- Environment: ${{ steps.process-params.outputs.environment }}"
        echo "- Version: ${{ steps.process-params.outputs.version }}"
        echo "- Features: ${{ steps.process-params.outputs.features }}"
        echo "- Triggered by: ${{ steps.parse-comment.outputs.triggered_by }}"
        echo ""
        echo "Next Steps:"
        echo "- Monitor deployment pipeline"
        echo "- Check deployment status in target environment"
        echo "- Review logs for any issues"
        echo ""
        echo "PR comment deployment workflow completed!"
